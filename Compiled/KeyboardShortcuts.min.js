class KeyboardShortcuts{
/**
     * Initializes the KeyboardShortcuts instance and binds the event listener.
     *
     * @example
     * const shortcuts = new KeyboardShortcuts();
     * shortcuts.addShortcut('ctrl+s', event => console.log('Save'));
     * shortcuts.addShortcut('ctrl+z', event => console.log('Undo'));
     * shortcuts.addShortcut('ctrl+y', event => console.log('Redo'));
     *
     * shortcuts.listShortcuts(); // ['ctrl+s', 'ctrl+z', 'ctrl+y']
     *
     * shortcuts.removeShortcut('ctrl+z');
     * shortcuts.clearShortcuts();
     *
     * shortcuts.destroy();
     * @preserve
     */
constructor(){this.shortcuts=new Map,this.listener=this.#t.bind(this),document.addEventListener("keydown",this.listener)}
/**
     * Normalizes a key string by converting it to lowercase and removing whitespace.
     * @param {string} key - The key string to normalize.
     * @returns {string} The normalized key string.
     * @preserve
     */#s(t){return t.toLowerCase().replace(/\s+/g,"")}
/**
     * Handles the keydown event and executes the corresponding shortcut callback if available.
     * This also prevents the default browser behavior for the shortcut key combination.
     * @param {KeyboardEvent} event - The keydown event.
     * @preserve
     */#t(t){const s=this.#s(`${t.ctrlKey?"ctrl+":""}${t.shiftKey?"shift+":""}${t.altKey?"alt+":""}${t.metaKey?"meta+":""}${t.key}`),e=this.shortcuts.get(s);e&&(t.preventDefault(),e(t))}
/**
     * Adds a new keyboard shortcut.
     * @param {string} keys - The key combination for the shortcut (e.g., "ctrl+s").
     * @param {Function} callback - The function to execute when the shortcut is triggered.
     * @preserve
     */addShortcut(t,s){const e=this.#s(t);this.shortcuts.has(e)?console.warn(`Shortcut '${t}' is already assigned.`):this.shortcuts.set(e,s)}
/**
     * Removes an existing keyboard shortcut.
     * @param {string} keys - The key combination of the shortcut to remove.
     * @preserve
     */removeShortcut(t){const s=this.#s(t);this.shortcuts.has(s)?this.shortcuts.delete(s):console.warn(`Shortcut '${t}' does not exist.`)}
/**
     * Lists all registered keyboard shortcuts.
     * @returns {string[]} An array of registered key combinations.
     * @preserve
     */listShortcuts(){return Array.from(this.shortcuts.keys())}
/**
     * Clears all registered keyboard shortcuts.
     * @preserve
     */clearShortcuts(){this.shortcuts.clear()}
/**
     * Destroys the KeyboardShortcuts instance by removing the event listener and clearing shortcuts.
     * @preserve
     */destroy(){document.removeEventListener("keydown",this.listener),this.clearShortcuts()}}
//# sourceMappingURL=KeyboardShortcuts.js.map