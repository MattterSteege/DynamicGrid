/**
 * Initializes the KeyboardShortcuts instance and binds the event listener.
 * @example
 * const shortcuts = new KeyboardShortcuts();
 * shortcuts.addShortcut('ctrl+s', event => console.log('Save'));
 * shortcuts.addShortcut('ctrl+z', event => console.log('Undo'));
 * shortcuts.addShortcut('ctrl+y', event => console.log('Redo'));
 *
 * shortcuts.listShortcuts(); // ['ctrl+s', 'ctrl+z', 'ctrl+y']
 *
 * shortcuts.removeShortcut('ctrl+z');
 * shortcuts.clearShortcuts();
 *
 * shortcuts.destroy();
 * @license MIT
 * @author Matt ter Steege (Kronk)
 */
class KeyboardShortcuts{constructor(){this.shortcuts=new Map,this.listener=this.#t.bind(this),document.addEventListener("keydown",this.listener)}#s(t){return t.toLowerCase().replace(/\s+/g,"")}#t(t){const s=this.#s(`${t.ctrlKey?"ctrl+":""}${t.shiftKey?"shift+":""}${t.altKey?"alt+":""}${t.metaKey?"meta+":""}${t.key}`),e=this.shortcuts.get(s);e&&(t.preventDefault(),e(t))}addShortcut(t,s,e){const r=this.#s(t);this.shortcuts.has(r)?console.warn(`Shortcut '${t}' is already assigned.`):this.shortcuts.set(r,e)}removeShortcut(t){const s=this.#s(t);this.shortcuts.has(s)?this.shortcuts.delete(s):console.warn(`Shortcut '${t}' does not exist.`)}listShortcuts(){return Array.from(this.shortcuts.keys())}clearShortcuts(){this.shortcuts.clear()}destroy(){document.removeEventListener("keydown",this.listener),this.clearShortcuts()}}
//# sourceMappingURL=KeyboardShortcuts.js.map