class ContextMenu{#container;#menuDom=null;#isVisible=!1;#isRootMenu=!0;#parentMenu=null;#childMenus=[];#menuItems;constructor(container,items){if(!(container&&container instanceof HTMLElement))throw new Error("Invalid container element");this.#container=container,this.#menuItems=items,this.handleOutsideClick=this.handleOutsideClick.bind(this),document.addEventListener("click",this.handleOutsideClick)}handleOutsideClick(event){this.#isVisible&&this.#menuDom&&event.target!==this.#menuDom&&!this.#menuDom.contains(event.target)&&!event.target.closest(".context-menu")&&this.#dismissAllMenus()}#createMenuElement(posX,posY){const menuEl=document.createElement("div");return menuEl.classList.add("context-menu"),menuEl.style.left=`${posX}px`,menuEl.style.top=`${posY}px`,this.#menuItems.forEach((itemData=>{menuEl.appendChild(this.#renderMenuItem(itemData))})),this.#menuDom=menuEl,menuEl}#renderMenuItem(itemData){if(null===itemData){const separator=document.createElement("div");return separator.classList.add("menu-separator"),separator}const itemEl=document.createElement("div");itemEl.classList.add("menu-item");const labelEl=document.createElement("span");labelEl.classList.add("menu-label"),labelEl.textContent=itemData.text?.toString()||"",itemEl.appendChild(labelEl),itemData.disabled?itemEl.classList.add("menu-item-disabled"):itemEl.classList.add("menu-item-active");const hotkeyEl=document.createElement("span");if(hotkeyEl.classList.add("menu-hotkey"),hotkeyEl.textContent=itemData.hotkey?.toString()||"",itemEl.appendChild(hotkeyEl),this.#hasSubItems(itemData)){const subMenuData=itemData.subitems||itemData.submenu,subMenu=subMenuData instanceof ContextMenuHandler?subMenuData:new ContextMenuHandler(this.#container,subMenuData);subMenu.#isRootMenu=!1,subMenu.#parentMenu=this,this.#childMenus.push(subMenu),itemEl.classList.add("has-submenu");const openSubMenu=e=>{if(itemData.disabled)return;this.#hideChildMenus();const subMenuPosX=this.#menuDom.offsetLeft+this.#menuDom.clientWidth+itemEl.offsetLeft,subMenuPosY=this.#menuDom.offsetTop+itemEl.offsetTop;subMenu.#isVisible?subMenu.#hide():subMenu.#show(subMenuPosX,subMenuPosY)};itemEl.addEventListener("click",openSubMenu),itemEl.addEventListener("mousemove",openSubMenu)}else itemEl.addEventListener("click",(e=>{if(this.#hideChildMenus(),!itemEl.classList.contains("menu-item-disabled"))if("function"==typeof itemData.onclick){const eventContext={handled:!1,item:itemEl,label:labelEl,hotkey:hotkeyEl,items:this.#menuItems,data:itemData};itemData.onclick(eventContext),eventContext.handled||this.#hide()}else this.#hide()})),itemEl.addEventListener("mousemove",(()=>{this.#hideChildMenus()}));return itemEl}#hasSubItems(itemData){return itemData.subitems&&Array.isArray(itemData.subitems)&&itemData.subitems.length>0||itemData.submenu&&itemData.submenu instanceof ContextMenuHandler}#dismissAllMenus(){!this.#isRootMenu||this.#parentMenu?this.#parentMenu.#hide():this.#isVisible&&(this.#hideChildMenus(),this.#isVisible=!1,this.#container.removeChild(this.#menuDom),this.#parentMenu&&this.#parentMenu.#isVisible&&this.#parentMenu.#hide())}#hide(){this.#menuDom&&this.#isVisible&&(this.#isVisible=!1,this.#hideChildMenus(),this.#container.removeChild(this.#menuDom),this.#parentMenu&&this.#parentMenu.#isVisible&&this.#parentMenu.#hide()),this.#cleanup()}#hideChildMenus(){this.#childMenus.forEach((submenu=>{submenu.#isVisible&&(submenu.#isVisible=!1,submenu.#container.removeChild(submenu.#menuDom)),submenu.#hideChildMenus()}))}#show(posX,posY){this.#createMenuElement(posX,posY),this.#container.appendChild(this.#menuDom),setTimeout((()=>{this.#isVisible=!0}),0)}#cleanup(){this.#menuDom=null,document.removeEventListener("click",this.handleOutsideClick)}display(posX,posY){return this.#show(posX,posY),this}dismiss(){return this.#hide(),this}getMenuState(){return{container:this.#container,domElement:this.#menuDom,isVisible:this.#isVisible,isRootMenu:this.#isRootMenu,parentMenu:this.#parentMenu,childMenus:this.#childMenus,menuItems:this.#menuItems}}}