class DynamicGrid{constructor(config){this.engine=new SJQLEngine(config.engine||{},config.parser||{}),this.engine.plugins=config.plugins??[],this.engine.addPlugin(new stringTypePlugin,!0),this.engine.addPlugin(new numberTypePlugin,!0),this.engine.addPlugin(new booleanTypePlugin,!0),config.headers&&Object.entries(config.headers).forEach((([key,value])=>{this.engine.headers[key]=value.toLowerCase()})),this.virtualScrolling=config.ui.virtualScrolling??!0,this.rowHeight=config.ui.rowHeight||40,this.visibleRows=config.ui.visibleRows||20,this.ui=new DynamicGridUI(this,config.ui)}importData(data,config){this.engine.importData(data,config),this.engine.createDataIndex()}render(query){this.ui.render(this.engine.query(query))}}class DynamicGridUI{constructor(dynamicGrid,ui_config){this.dynamicGrid=dynamicGrid,this.containerId=ui_config.containerId,this.init(this.containerId),this.cachedHeader=null,this.cachedPagination=null,this.cacheCheck=null,this.config={usePagination:ui_config.usePagination??!0,paginationPageSize:ui_config.paginationPageSize??100,paginationPage:ui_config.paginationPage??1}}init(containerId){if(this.container=document.querySelector(containerId),!this.container)throw new GridError(`Container with id "${containerId}" not found`)}render(data){const headerNames=Object.keys(this.dynamicGrid.engine.headers).join(",");this.container.className="dynamic-grid-container",this.container.innerHTML="";const table=document.createElement("table");table.className="dynamic-grid";const hash=FastHash(headerNames),dataHash=FastHash(headerNames+"-"+data.length);this.cachedHeader&&this.cacheCheck===hash||(this.cachedHeader=this.renderHeader(),this.cacheCheck=hash),!this.config.usePagination||this.cachedPagination&&this.cacheDataCheck===dataHash||(this.config.paginationPage=1,this.cachedPagination=this.renderPagination(data),this.cacheDataCheck=dataHash),table.appendChild(this.cachedHeader),table.appendChild(this.renderBody(data)),this.container.appendChild(table),this.config.usePagination&&this.container.appendChild(this.cachedPagination)}renderHeader(){const thead=document.createElement("thead"),headerRow=document.createElement("tr");return headerRow.addEventListener("click",(e=>{e.preventDefault();const target=e.target,clickable=target.getAttribute("header-clickable");if(!clickable)return;const key=target.getAttribute("data-key"),type=target.getAttribute("data-type");"sort"===clickable?(this.sortedState={key:key,state:this.sortedState?.key===key&&"asc"===this.sortedState.state?"desc":"asc"},this.render(this.dynamicGrid.engine.sort(this.sortedState.key,this.sortedState.state))):"more"===clickable&&this.dynamicGrid.engine.plugins[type].showMore(key)})),Object.entries(this.dynamicGrid.engine.headers).forEach((([key,type])=>{if("internal_id"===key)return;this.dynamicGrid.engine.getPlugin(type);const th=document.createElement("th"),headerContent=document.createElement("div");headerContent.className="header-content";const titleWrapper=document.createElement("div");titleWrapper.className="title-wrapper";const headerText=document.createElement("span");headerText.textContent=key,titleWrapper.appendChild(headerText);const sortButton=document.createElement("button");sortButton.className="sort-button",sortButton.innerHTML='<span style="pointer-events: none" class="sort-icon"></span>',sortButton.setAttribute("header-clickable","sort"),sortButton.setAttribute("data-key",key),sortButton.setAttribute("data-type",type),titleWrapper.appendChild(sortButton);const moreButton=document.createElement("button");moreButton.className="more-button",moreButton.innerHTML='<span style="pointer-events: none" class="more-icon">&#10247;</span>',moreButton.setAttribute("header-clickable","more"),moreButton.setAttribute("data-key",key),moreButton.setAttribute("data-type",type),titleWrapper.appendChild(moreButton),headerContent.appendChild(titleWrapper),th.appendChild(headerContent),headerRow.appendChild(th)})),thead.style.position="sticky",thead.style.top="0",thead.appendChild(headerRow),thead}renderBody(data){const tbody=document.createElement("tbody");for(let index=0;index<data.length&&!(this.config.usePagination&&index>=this.config.paginationPage*this.config.paginationPageSize);index++){if(this.config.usePagination&&index<(this.config.paginationPage-1)*this.config.paginationPageSize)continue;const row=data[index],tr=document.createElement("tr");tr.className=index%2==0?"row-even":"row-odd",Object.keys(this.dynamicGrid.engine.headers).forEach((key=>{"internal_id"!==key&&tr.append(this.dynamicGrid.engine.getPlugin(this.dynamicGrid.engine.headers[key]).renderCell(row[key]))})),tbody.appendChild(tr)}return tbody}renderPagination(data){const pagination=document.createElement("div");pagination.className="pagination";const totalPages=Math.ceil(data.length/this.config.paginationPageSize);for(let i=1;i<=totalPages;i++){const pageButton=document.createElement("button");pageButton.textContent=i,pageButton.onclick=()=>{this.config.paginationPage=i;pagination.querySelectorAll("button").forEach((button=>button.classList.remove("active"))),pageButton.classList.add("active"),this.render(data)},pagination.appendChild(pageButton)}return pagination}toggleColumn(key){const styles=document.querySelector('style[id="dynamic-grid-styles"]');if(!styles){const style=document.createElement("style");style.id="dynamic-grid-styles",document.head.appendChild(style)}const hiddenColumns=styles.dataset.hiddenColumns?styles.dataset.hiddenColumns.split(","):[],headerKeys=Object.keys(this.dynamicGrid.engine.headers).filter((header=>"internal_id"!==header));-1!==headerKeys.indexOf(key)&&(hiddenColumns.includes(key)?hiddenColumns.splice(hiddenColumns.indexOf(key),1):hiddenColumns.push(key),styles.dataset.hiddenColumns=hiddenColumns.join(","),styles.textContent=hiddenColumns.map((key=>`th:nth-child(${headerKeys.indexOf(key)+1}), td:nth-child(${headerKeys.indexOf(key)+1}) { display: none; }`)).join(""))}}class TypePlugin{static DEFAULT_OPERATORS=["==","!=","in"];constructor(){if(this.constructor===TypePlugin)throw new Error("TypePlugin is abstract and cannot be instantiated directly");this.name=this.constructor.name,this.operators=["==","!=","in"]}getJSQLFormat(value){throw new Error("getJSQLFormat must be implemented by subclass")}validate(value){throw new Error("validate must be implemented by subclass")}evaluate(query,dataIndexes,data,indices){throw new Error("evaluate must be implemented by subclass")}evaluateCondition(dataValue,operator,compareValue){throw new Error("evaluateCondition must be implemented by subclass")}sort(query,data){const{field:field,value:direction}=query;return[...data].sort(((a,b)=>{const comparison=String(a[field]).localeCompare(String(b[field]));return"asc"===direction?comparison:-comparison}))}checkOperator(operator){return this.operators.find((op=>op===operator))}getOperatorSymbols(){return[...this.operators]}renderHeader(key){const th=document.createElement("th");return th.textContent=key,th}renderCell(value){const td=document.createElement("td");return td.textContent=String(value),td}showMore(key,dynamicGrid){throw new GridError("handleMore must be implemented by subclass")}}class stringTypePlugin extends TypePlugin{constructor(){super(),this.operators=["%=","=%","*=","!*=","==","!=","in"]}validate(value){return"string"==typeof value}getJSQLFormat(value){return'"'===value[0]&&'"'===value[value.length-1]||"'"===value[0]&&"'"===value[value.length-1]?value.substring(1,value.length-1):value}evaluate(query,dataIndexes,data,indices){if(dataIndexes&&indices&&dataIndexes.size<=indices.size)for(const index of dataIndexes.keys())this.evaluateCondition(index,query.operator,query.value)||dataIndexes.get(index).forEach((idx=>indices.delete(idx)));else for(const index of indices)this.evaluateCondition(data[index][query.field],query.operator,query.value)||indices.delete(index);return indices}evaluateCondition(dataValue,operator,value){if("in"===operator&&(value=JSON.parse(value)),Array.isArray(value)&&value.length>0&&"in"===operator)return value.includes(dataValue);switch(operator){case"==":return dataValue===value;case"!=":return dataValue!==value;case"%=":return dataValue.startsWith(value);case"=%":return dataValue.endsWith(value);case"*=":return dataValue.includes(value);case"!*=":return!dataValue.includes(value)}return!1}renderHeader(key){const elem=document.createElement("th");return elem.innerHTML=key,elem}renderCell(value){const elem=document.createElement("td");return value?elem.innerHTML=value:elem.className="error",elem}sort(query,data){const{field:field,value:value}=query;return data.sort(((a,b)=>"asc"===value?a[field].localeCompare(b[field]):"desc"===value?b[field].localeCompare(a[field]):void 0))}}class numberTypePlugin extends TypePlugin{constructor(){super(),this.operators=[">","<",">=","<=","==","!=","in"]}validate(value){return!isNaN(Number(value))}getJSQLFormat(value){if(isNaN(Number(value)))throw new GridError("Value is not a number");return value.toString()}evaluate(query,dataIndexes,data,indices){if(dataIndexes&&indices&&dataIndexes.size<=indices.size)for(const index of dataIndexes.keys())this.evaluateCondition(index,query.operator,query.value)||dataIndexes.get(index).forEach((idx=>indices.delete(idx)));else for(const index of indices)this.evaluateCondition(data[index][query.field],query.operator,query.value)||indices.delete(index);return indices}evaluateCondition(dataValue,operator,value){if("in"===operator&&(value=JSON.parse(value)),Array.isArray(value)&&value.length>0&&"in"===operator)return value.includes(dataValue);switch(dataValue=Number(dataValue),operator){case">":return dataValue>value;case"<":return dataValue<value;case">=":return dataValue>=value;case"<=":return dataValue<=value;case"==":return dataValue===value;case"!=":return dataValue!==value}}renderHeader(key){const elem=document.createElement("th");return elem.innerHTML=key,elem}renderCell(value){const elem=document.createElement("td");return value||0===value?elem.innerHTML=value.toString().replace(/\B(?=(\d{3})+(?!\d))/g,"."):elem.className="error",elem}sort(query,data){const{field:field,value:value}=query;return data.sort(((a,b)=>"asc"===value?a[field]-b[field]:"desc"===value?b[field]-a[field]:void 0))}}class booleanTypePlugin extends TypePlugin{constructor(){super(),this.operators=["==","!="]}validate(value){return"boolean"==typeof value||"string"==typeof value&&("true"===value||"false"===value)}getJSQLFormat(value){return"true"===value.toLowerCase()}evaluate(query,dataIndexes,data,indices){if(dataIndexes){const allowedValues=dataIndexes.get(query.value);return new Set([...indices].filter((x=>allowedValues.has(x))))}return new Set(data.map(((row,i)=>row[query.field]===query.value?i:null)).filter((x=>null!==x)))}evaluateCondition(dataValue,operator,value){return dataValue===value}sort(query,data){const{field:field,value:value}=query;return data.sort(((a,b)=>"asc"===value?a[field]-b[field]:"desc"===value?b[field]-a[field]:void 0))}renderHeader(key){const elem=document.createElement("th");return elem.innerHTML=key,elem}renderCell(value){const elem=document.createElement("td"),checkbox=document.createElement("input");return checkbox.type="checkbox",checkbox.checked=value,checkbox.disabled=!0,elem.appendChild(checkbox),elem}}class QueryParser{constructor(config){this.config={useStrictCase:config.useStrictCase||!1,SymbolsToIgnore:config.SymbolsToIgnore||[" ","_","-"]}}static QUERIES={RANGE:/range\s+(-?\d+)-?(-?\d+)?/i,SORT:/sort\s+(.+)\s+(asc|desc)/i,SELECT:/([A-Za-z]+)\s+(\S+)\s+(.+)/i};parseQuery=(query,plugins,headers)=>query.split(/\s+and\s+|\s+&&\s+/i).map((subQuery=>this.parseSubQuery(subQuery.trim(),plugins,headers))).filter((query=>query.queryType));parseSubQuery(subQuery,plugins,headers){subQuery=subQuery.endsWith(" and")?subQuery.slice(0,-4):subQuery;for(const[type,regex]of Object.entries(QueryParser.QUERIES)){const match=regex.exec(subQuery);if(match)return this.parseMatch(match,type,plugins,headers)||{}}return console.warn("Invalid query: "+subQuery+"\nValid queries are: "+Object.keys(QueryParser.QUERIES).join(", ").toLowerCase()),{}}parseMatch(match,type,plugins,headers){if("SELECT"===type){let[_,key,operator,value]=match;key=MeantIndexKey(Object.keys(headers),key,this.config);const pluginType=headers[key],plugin=plugins[pluginType];if(!plugin)throw new GridError("No plugin found for header ("+pluginType+") for key ("+key+")\nDo you know certain that the name of the key is correct?");let field=key,operatorObj=plugin.checkOperator(operator);if(!operatorObj)throw new GridError(this.formatOperatorError(operator,field+" "+operator+" "+value,plugin));return plugin.validate(value)&&(value=plugin.getJSQLFormat(value)),{type:pluginType,field:field,operator:operatorObj,value:value,queryType:"SELECT"}}if("SORT"===type){let[_,key,value]=match;const pluginType=headers[key];if(!plugins[pluginType])throw new GridError("No plugin found for header ("+pluginType+") for key ("+key+")");return{type:pluginType,field:key,operator:"sort",value:value,queryType:"SORT"}}if("RANGE"===type){let[_,lower,upper]=match;return void 0===upper&&(upper=lower,lower=0),lower=parseInt(lower),upper=parseInt(upper),{type:"range",lower:lower,upper:upper,queryType:"RANGE"}}return console.warn("Invalid query: "+match+"\nValid queries are: "+Object.keys(QueryParser.QUERIES).join(", ").toLowerCase()),{}}formatOperatorError(operator,field,plugin){return["\n\nInvalid operator:    "+operator,"       For query:    "+field,"     options are:    "+plugin.getOperatorSymbols().join(", "),"\n"].join("\n")}}class SJQLEngine{constructor(engine_config,parser_config){this.data=[],this.headers=[],this.plugins=[],this.currentQuery={},this.currentQueryStr="",this.QueryParser=new QueryParser(parser_config),this.config={UseDataEnumeration:engine_config.UseDataEnumeration||!1,UseDataIndexing:engine_config.UseDataIndexing||!0,useStrictCase:engine_config.useStrictCase||!1,SymbolsToIgnore:engine_config.SymbolsToIgnore||[" ","_","-"]}}createDataIndex(){this.config.UseDataIndexing&&(this.dataIndexes={},Object.keys(this.headers).forEach((header=>{this.dataIndexes[header]=new Map,this.data.forEach(((row,idx)=>{const value=row[header];this.dataIndexes[header].has(value)||this.dataIndexes[header].set(value,new Set),this.dataIndexes[header].get(value).add(idx)}))})))}autoDetectHeaders(data){for(const key of Object.keys(data))!0===data[key]||!1===data[key]?this.headers[key]="boolean":isNaN(data[key])?this.headers[key]="string":this.headers[key]="number"}query(query=""){return this.data&&0!==this.data.length?query?this._query(this.QueryParser.parseQuery(query,this.plugins,this.headers)):(console.warn("No query provided, returning all data"),this.data):(console.warn("No data provided, returning empty array"),[])}_query(query){if(!query||0===query.length)return this.data;const selectQueries=[];let sortQuery=null,rangeQuery=null,validIndices=new Set;for(const q of query)switch(q.queryType){case"SELECT":selectQueries.push(q);break;case"SORT":sortQuery=q;break;case"RANGE":rangeQuery=q}if(this.currentQuery=selectQueries,this.currentQueryStr=selectQueries.map((q=>q.field+" "+q.operator+" "+q.value)).join(" and "),performance.mark("startQuery"),validIndices=new Set(this.data.map(((_,i)=>i))),this.config.UseDataEnumeration)console.warn("Data enumeration is not implemented yet");else{for(const q of selectQueries){q.field=MeantIndexKey(Object.keys(this.data[0]),q.field,this.config);const plugin=this.getPlugin(q.type);if(!plugin)throw new GridError("No plugin found for header ("+q.type+") for key ("+q.field+")");validIndices=plugin.evaluate(q,this.dataIndexes[q.field],this.data,validIndices)}if(rangeQuery){const first=validIndices.values().next().value,lower=Math.max(0,first+rangeQuery.lower),upper=Math.min(this.data.length-1,first+rangeQuery.upper-1),result=new Set;for(let i=lower;i<=upper;i++)result.add(i);validIndices=result}}return sortQuery?this.getPlugin(sortQuery.type).sort(sortQuery,this.data.filter(((_,i)=>validIndices.has(i)))):this.data.filter(((_,i)=>validIndices.has(i)))}sort(key,direction){let query;return console.log("sort:",key,direction),query=0===this.currentQuery.length?"sort "+key+" "+direction:this.currentQueryStr+" and sort "+key+" "+direction,this.query(query)}addPlugin(plugin,dontOverride=!1){if(!(plugin instanceof TypePlugin))throw new GridError("Plugin must extend TypePlugin");const existingPlugin=this.getPlugin(plugin.name,!0);dontOverride&&existingPlugin||(existingPlugin&&!dontOverride?(console.warn("Plugin already exists, removing the old plugin"),this.plugins[plugin.name.replace("TypePlugin","")]=plugin):this.plugins[plugin.name.replace("TypePlugin","")]=plugin)}getPlugin(name,justChecking=!1){if(!name)throw new GridError("Plugin name not provided");if("string"!=typeof name)return!1;const plugin=this.plugins[name.replace("TypePlugin","")];if(!plugin&&!justChecking)throw new GridError("Plugin not found: "+name);return!(!plugin&&justChecking)&&plugin}importData(data,config){if("json"===config.type)this.parseJsonData(data,config);else{if("csv"!==config.type)throw new GridError("Invalid data type");this.parseCSVData(data,config)}0===Object.keys(this.headers).length&&(console.warn("No headers provided, auto detecting headers, please provide so the system can you more optimal plugins"),this.autoDetectHeaders(this.data[0]))}parseJsonData(data,config){if("string"!=typeof data)throw new GridError("Data must be a string (raw JSON)");if(data=JSON.parse(data),!Array.isArray(data))throw new GridError("Data must be an array");if(0===data.length)return console.warn("No data provided"),[];this.data=data.map(((item,index)=>{const newItem={};newItem.internal_id=index;for(const key of Object.keys(item))newItem[key]=item[key];return newItem}))}parseCSVData(data,config){const lines=data.split("\n"),headers=lines[0].split(",").map((header=>header.replace(/"/g,"").replace(" ","_").replace("\r","")));console.log(headers),this.data=lines.slice(1).map(((line,index)=>{const values=line.split(/(?!"[a-zA-z0-9\s.()]*)(?:,|,"|",)(?![a-zA-z0-9\s.()]*")/gim),newItem={};return newItem.internal_id=index,headers.forEach(((header,i)=>{"string"==typeof values[i]&&(values[i].endsWith('"')?values[i]=values[i].slice(0,-1):values[i]),newItem[header]=values[i]})),newItem})).slice(0,-1)}}class GridError extends Error{constructor(message){super(message),this.name="GridError",this.stack=""}}function FastHash(string){let hash=0;for(let i=0;i<string.length;i++)hash=(hash<<5)-hash+string.charCodeAt(i),hash|=0;return hash}function MeantIndexKey(dataIndexesKeys,field,config){return dataIndexesKeys.find((key=>{let normalizedKey="";normalizedKey=config.SymbolsToIgnore.length?key.replace(new RegExp(`[${config.SymbolsToIgnore.join("")}]`,"g"),""):key,config.useStrictCase||(normalizedKey=normalizedKey.toLowerCase());let normalizedField="";return normalizedField=config.SymbolsToIgnore.length?field.replace(new RegExp(`[${config.SymbolsToIgnore.join("")}]`,"g"),""):field,config.useStrictCase||(normalizedField=normalizedField.toLowerCase()),console.log(normalizedKey,normalizedField),normalizedKey===normalizedField}))}